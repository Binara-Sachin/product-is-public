<%
include("constants.jag");

var log = new Log();
var identityServerURL = Packages.org.wso2.carbon.identity.core.util.IdentityUtil;

/*
 * Function to update server url information
 */
function setServerURL() {
    var serverUrl = stringify(application.get(SERVER_URL));
    if(serverUrl === 'null' || serverUrl == null || serverUrl.length <= 0){
        //Server URL is not specified in the jaggery.conf, therefore using the service url mentioned in the carbon.conf
        var carbon = require('carbon');
        var serverConfigService = carbon.server.osgiService('org.wso2.carbon.base.api.ServerConfigurationService');
        var configContextService = carbon.server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
        var configContext = configContextService.getServerConfigContext();

        mgtTransport = "https";

        var path = "/conf/site.json";
        var file = new File(path);
        file.open("r");
        var json = "";

        json = file.readAll();
        file.close();
        var jsonConf = parse(json);

        var hostName = '';

        //retrieving site configuration for overiding ui urls
        var proxyConfHost = jsonConf.proxy.proxyHost;
        var proxyConfPort = jsonConf.proxy.proxyHTTPSPort;
        var fidoAppId = jsonConf.fido.appId;
        var proxyOrigin = '';



        if (( proxyConfHost == null || proxyConfHost === '' || proxyConfHost === 'null' || proxyConfHost.length <= 0 )
            || ( proxyConfPort == null || proxyConfPort === '' || proxyConfPort === 'null' || proxyConfPort.length <=
            0 )) {
            //overriding carbon proxy settings configuration not available for ui urls
            proxyOrigin = identityServerURL.getServerURL("", false, false);
        } else {
            //proxy settings available for ui urls
            proxyOrigin = mgtTransport + "://" + proxyConfHost + ":" + proxyConfPort;
            if (log.isDebugEnabled()) {
                log.debug("site configuration ui url overiding available - Proxy Origin Name : " + proxyOrigin);
            }

        }

        var proxyContextPath = '';
        var proxyConfContextPath = jsonConf.proxy.proxyContextPath;
        if ( proxyConfContextPath == null || proxyConfContextPath === '' || proxyConfContextPath === 'null' || proxyConfContextPath.length <= 0 ){
            //overriding carbon proxy settings configuration not available for ui urls
            proxyContextPath = serverConfigService.getFirstProperty(PROXY_CONTEXT_PATH);
        } else {
            //proxy settings available for ui urls
            if (log.isDebugEnabled()) {
                log.debug("site configuration ui url overiding available - Proxy Port : " + proxyConfPort);
            }
            proxyContextPath = proxyConfContextPath;
        }

        if (proxyContextPath === 'null' || proxyContextPath == null || proxyContextPath === '' || proxyContextPath.length <= 0 ){
            proxyContextPath = "";
        } else {
            if (proxyContextPath.indexOf('/') != 0) {
                proxyContextPath = '/' + proxyContextPath;
            }
        }

        var serverCoreUrl = '';
        //create server service url
        var serviceOrigin = '';
        if (jsonConf.service == undefined) {
            serviceOrigin = '';
        } else if (jsonConf.service.serviceOrigin == undefined) {
            serviceOrigin = '';
        } else {
            serviceOrigin = jsonConf.service.serviceOrigin;
        }
        if ( serviceOrigin == null || serviceOrigin === '' || serviceOrigin === 'null' || serviceOrigin.length <= 0 ){
            serverCoreUrl = identityServerURL.getServerURL("", true, false);
            serverUrl = identityServerURL.getServerURL("/services", true, true);
        } else {
            serverCoreUrl = identityServerURL.fillURLPlaceholders(serviceOrigin);
            serverUrl = serverCoreUrl + "/services";
        }

        //set server url infomation
        application.put(MGT_TRANSPORT, mgtTransport);
        application.put(SERVER_URL, serverUrl);
        application.put(SERVER_CORE_URL, serverCoreUrl);
        application.put(PROXY_CONTEXT_PATH, proxyContextPath);
        application.put(FIDO_APP_ID, fidoAppId);
        application.put(PROXY_ORIGIN, proxyOrigin);

        if (log.isDebugEnabled()) {
            log.debug("Proxy Origin      :" + proxyOrigin);
            log.debug("Server Url      :" + serverUrl);
            log.debug("Server Core Url :" + serverCoreUrl);
            log.debug("Proxy Context Path :" + proxyContextPath);
        }
    }
}

function getFidoAppId(){
    setServerURL();
    return application.get(FIDO_APP_ID);
}

%>